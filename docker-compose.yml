# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:2.10.5
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# AIRFLOW_PROJ_DIR             - Base path to which all the files will be volumed.
#                                Default: .
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Use this option ONLY for quick checks. Installing requirements at container
#                                startup is done EVERY TIME the service is started.
#                                A better way is to build a custom image or extend the official image
#                                as described in https://airflow.apache.org/docs/docker-stack/build.html.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-ghcr.io/radiant-network/radiant-airflow:1.0.3}
  # build: .
  environment:
    &airflow-common-env
    PYTHONPATH: /opt/airflow/dags
    AWS_REGION: us-east-1
    AWS_ACCESS_KEY_ID: admin
    AWS_SECRET_ACCESS_KEY: password
    HTS_S3_HOST: radiant-minio:9000
    HTS_S3_ADDRESS_STYLE: path
    PYICEBERG_CATALOG__DEFAULT__URI: http://radiant-iceberg-rest:8181
    PYICEBERG_CATALOG__DEFAULT__S3__ENDPOINT: http://radiant-minio:9000
    PYICEBERG_CATALOG__DEFAULT__TOKEN: mysecret
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__LOGGING__REMOTE_LOGGING: 'False'
    AIRFLOW__LOGGING__BASE_LOG_FOLDER: '/opt/airflow/logs'
    AIRFLOW__LOGGING__LOGGING_CONFIG_CLASS: 'airflow.config_templates.airflow_local_settings.DEFAULT_LOGGING_CONFIG'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # The following line can be used to set a custom config file, stored in the local config folder
    # If you want to use it, outcomment it and replace airflow.cfg with the name of your config file
    # AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'

    # Observability feature flags
    OTLP_COLLECTOR_ENABLED: "true"
    AIRFLOW__METRICS__OTEL_ON: "False"
    AIRFLOW__TRACES__OTEL_ON: "False"

    # Radiant-specific OTEL span collection
    OTLP_COLLECTOR_HTTP_ENDPOINT: "http://host.docker.internal:8889"

    # Airflow-bundled OTEL METRICS
    AIRFLOW__METRICS__OTEL_HOST: "host.docker.internal"
    AIRFLOW__METRICS__OTEL_PORT: "8889"
    AIRFLOW__METRICS__OTEL_PREFIX: "airflow"
    AIRFLOW__METRICS__OTEL_INTERVAL_MILLISECONDS: 60000
    AIRFLOW__METRICS__OTEL_DEBUGGING_ON: "False"
    AIRFLOW__METRICS__OTEL_SERVICE: "Airflow"
    AIRFLOW__METRICS__OTEL_SSL_ACTIVE: "False"

    # Airflow-bundled OTEL TRACES
    AIRFLOW__TRACES__OTEL_HOST: "host.docker.internal"
    AIRFLOW__TRACES__OTEL_PORT: "8889"
    AIRFLOW__TRACES__OTEL_SERVICE: "Airflow"
    AIRFLOW__TRACES__OTEL_DEBUGGING_ON: "False"
    AIRFLOW__TRACES__OTEL_SSL_ACTIVE: "False"
    AIRFLOW__TRACES__OTEL_TASK_LOG_EVENT: "False"

  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/radiant:/opt/airflow/dags/radiant
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
    - airflow_network

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - airflow_network
  schema-init:
    image: postgres:13
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: [ "sh", "-c" ]
    command:
      - >
        psql -h postgres -U airflow -d airflow -c "CREATE SCHEMA IF NOT EXISTS iceberg_catalog;"
    environment:
      PGPASSWORD: airflow
    networks:
      - airflow_network
  redis:
    # Redis is limited to 7.2-bookworm due to licencing change
    # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - airflow_network
  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib:latest
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "8889:8889"  # OTLP HTTP receiver
      - "8890:8890"  # OLTP gRPC receiver
  jaeger:
    image: jaegertracing/all-in-one:1.57
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "4317:4317"  # OTLP gRPC

  # Airflow services
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    mem_limit: 20g
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-config:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        airflow pools set import_vcf 16 "Import VCF Pool"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  radiant-iceberg-rest:
    image: ferlabcrsj/iceberg-rest-catalog:1.0.0
    container_name: radiant-iceberg-rest
    networks:
      airflow_network:
        aliases:
          - radiant-iceberg-rest.minio
    depends_on:
      - postgres
      - schema-init
    ports:
      - 8181:8181
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://radiant-minio:9000
      - CATALOG_S3_PATH__STYLE__ACCESS=true
      - CATALOG_CATALOG__IMPL=org.apache.iceberg.jdbc.JdbcCatalog
      - CATALOG_CATALOG__NAME=iceberg
      - CATALOG_SECRET=mysecret
      - CATALOG_JDBC_PASSWORD=airflow
      - CATALOG_JDBC_USER=airflow
      - CATALOG_URI=jdbc:postgresql://postgres:5432/airflow?currentSchema=iceberg_catalog
      - CATALOG_WAREHOUSE=s3a://warehouse/

  radiant-minio:
    image: minio/minio:RELEASE.2024-10-29T16-01-48Z
    container_name: radiant-minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=radiant-minio
    networks:
      airflow_network:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - minio-data-volume:/data
  mc:
    depends_on:
      - radiant-minio
    image: minio/mc:RELEASE.2024-10-29T15-34-59Z
    container_name: mc
    networks:
      airflow_network:
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://radiant-minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/starrocks;
      /usr/bin/mc policy set public minio/starrocks;      
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      /usr/bin/mc mb minio/vcf;
      /usr/bin/mc policy set public minio/vcf;      
      tail -f /dev/null
      "

  radiant-starrocks-fe:
    image: starrocks/fe-ubuntu:3.4.2  # TODO Changes this to 3.4.3 when available
    container_name: radiant-starrocks-fe
    hostname: radiant-starrocks-fe
    user: root
    depends_on:
      - radiant-minio
    command: >
      bash -c "
      echo 'run_mode = shared_data' >> /opt/starrocks/fe/conf/fe.conf;
      echo 'cloud_native_storage_type = S3' >> /opt/starrocks/fe/conf/fe.conf;
      echo 'aws_s3_path = starrocks/' >> /opt/starrocks/fe/conf/fe.conf;
      echo 'aws_s3_region = us-east-1' >> /opt/starrocks/fe/conf/fe.conf;
      echo 'aws_s3_endpoint = http://radiant-minio:9000' >> /opt/starrocks/fe/conf/fe.conf;
      echo 'aws_s3_access_key = admin' >> /opt/starrocks/fe/conf/fe.conf;
      echo 'aws_s3_secret_key = password' >> /opt/starrocks/fe/conf/fe.conf;
      echo 'enable_udf = true' >> /opt/starrocks/fe/conf/fe.conf;
      exec /opt/starrocks/fe/bin/start_fe.sh --host_type FQDN
      "
    ports:
      - 8030:8030
      - 9020:9020
      - 9030:9030
    networks:
      - airflow_network
    healthcheck:
      test: 'mysql -u root -h radiant-starrocks-fe -P 9030 -e "SHOW FRONTENDS\G" |grep "Alive: true"'
      interval: 10s
      timeout: 5s
      retries: 10

  radiant-starrocks-cn:
    image: starrocks/cn-ubuntu:3.4.2  # TODO Changes this to 3.4.3 when available
    container_name: radiant-starrocks-cn
    hostname: radiant-starrocks-cn
    user: root
    depends_on:
      - radiant-starrocks-fe
    environment:
      - HOST_TYPE=FQDN
    command: >
      bash -c "
        ulimit -u 65535;
        ulimit -n 65535;
        sleep 15;
        mysql --connect-timeout 2 -h radiant-starrocks-fe -P 9030 -u root -e \"ALTER SYSTEM ADD COMPUTE NODE \\\"radiant-starrocks-cn:9050\\\";\"
        bash /opt/starrocks/be/bin/start_cn.sh
      "
    ports:
      - 8040:8040
      - 8060:8060
      - 9050:9050
      - 9060:9060
    healthcheck:
      test: >
        mysql -u root -h radiant-starrocks-fe -P 9030 -e "SHOW COMPUTE NODES\G" |grep "Alive: true"
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - airflow_network

  init-starrocks-storage-volume:
    image: starrocks/fe-ubuntu:3.4.2  # TODO Changes this to 3.4.3 when available
    container_name: init-starrocks-storage-volume
    depends_on:
      - radiant-starrocks-cn
    entrypoint: >
      /bin/bash -c "
      sleep 15;
      mysql -h radiant-starrocks-fe -P 9030 -u root -e \"
      CREATE STORAGE VOLUME starrocks_storage_volume
      TYPE = S3
      LOCATIONS = ('s3://starrocks')
      PROPERTIES
      (
        'enabled' = 'true',
        'aws.s3.region' = 'us-east-1',
        'aws.s3.endpoint' = 'http://radiant-minio:9000',
        'aws.s3.access_key' = 'admin',
        'aws.s3.secret_key' = 'password',
        'aws.s3.enable_partitioned_prefix' = 'true'
      );
      SET starrocks_storage_volume AS DEFAULT STORAGE VOLUME;\"
      "
    networks:
      - airflow_network

  init-radiant-database:
     image: starrocks/fe-ubuntu:3.4.2  # TODO Changes this to 3.4.3 when available
     container_name: init-radiant-database
     depends_on:
       - init-starrocks-storage-volume
     entrypoint: >
       /bin/bash -c "
       sleep 15;
       mysql -h radiant-starrocks-fe -P 9030 -u root -e \"CREATE DATABASE IF NOT EXISTS radiant\"
       "
     networks:
       - airflow_network

  init-iceberg-catalog:
    image: starrocks/fe-ubuntu:3.4.2  # TODO Changes this to 3.4.3 when available
    container_name: init-iceberg-catalog
    depends_on:
      - radiant-starrocks-cn
      - radiant-iceberg-rest
    entrypoint: >
      /bin/bash -c "
      sleep 15;
      mysql -h radiant-starrocks-fe -P 9030 -u root -e \"
      CREATE EXTERNAL CATALOG 'radiant_iceberg_catalog'
      COMMENT 'External catalog to Apache Iceberg on MinIO'
      PROPERTIES
      (
        'type'='iceberg',
        'iceberg.catalog.type'='rest',
        'iceberg.catalog.uri'='http://radiant-iceberg-rest:8181',
        'iceberg.catalog.token' = 'mysecret',
        'aws.s3.region'='us-east-1',
        'aws.s3.access_key'='admin',
        'aws.s3.secret_key'='password',
        'aws.s3.endpoint'='http://radiant-minio:9000',
        'aws.s3.enable_path_style_access'='true',
        'client.factory'='com.starrocks.connector.share.iceberg.IcebergAwsClientFactory'
      );\"
      "
    networks:
      - airflow_network

volumes:
  postgres-db-volume:
  minio-data-volume:

networks:
  airflow_network:
